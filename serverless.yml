service: stat-service

plugins:
  - serverless-esbuild
  - serverless-step-functions
  - serverless-plugin-aws-alerts

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node14'
    define: { 'require.resolve': undefined }
    platform: 'node'
    concurrency: 10
  alerts:
    stages:
      - prod
    dashboards: false
    topics:
      alarm:
        topic: ${self:service}-${opt:stage}-alarm
      ok:
        topic: ${self:service}-${opt:stage}-ok
    definitions:
      functionDuration:
        treatMissingData: notBreaching
        threshold: 3000
        period: 300
        evaluationPeriods: 2
        datapointsToAlarm: 2
      functionErrors:
        treatMissingData: notBreaching
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
      functionThrottles:
        treatMissingData: notBreaching
        period: 120
        evaluationPeriods: 2
        datapointsToAlarm: 2
      functionInvocations:
        treatMissingData: notBreaching
        threshold: 100
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold    
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage}
  region: ${opt:region}
  versionFunctions: false
  logRetentionInDays: 14
  stackTags:
    Project: ${self:service}
    Stage: ${self:provider.stage}
  deploymentBucket:
    name: meetup-demo-${aws:accountId}-${self:provider.region} # account & region make it portable
  environment:
    STAGE: ${self:provider.stage}
    SERVICE: ${self:service}
    PLAYER_SERVICE: ${cf:player-service-${self:provider.stage}.HttpApiUrl} # Microservice discovery using CF variables
    
package:
  patterns:
    - '!.env'
    - '!node_modules/serverless/**'
    - '!node_modules/aws-sdk/**'
    - '!test*'
    - '!./**/__tests__/**'
    - '!./**/**/__tests__/**'
    - '!__tests__/**'
    - '!docker-compose.yml'
    - '!buildspec.yml'
    - '!README*'
    - '!.nyc_output'
    - '!.test-setup.js'
    - '!__mocks__/**'
    - '!nodejs/**'
    - '!coverage/**'

functions:

  GetPlayers:
    handler: lambdas/get-players.handler
    name: ${self:provider.stage}-${self:service}-get-players
    memorySize: 128
    timeout: 10

  AddStats:
    handler: lambdas/add-stats.handler
    name: ${self:provider.stage}-${self:service}-add-stats
    memorySize: 128
    timeout: 10

  CreateOutput:
    handler: lambdas/create-output.handler
    name: ${self:provider.stage}-${self:service}-create-output
    memorySize: 128
    timeout: 10

stepFunctions:
  stateMachines:
    Stats:
      name: ${self:service}-${self:provider.stage}
      type: STANDARD
      definition:
        StartAt: Get Players
        States:
          Get Players:
            Type: Task
            Resource:
              Fn::Join:
                - ":"
                - - arn:aws:lambda
                  - Ref: 'AWS::Region'
                  - Ref: 'AWS::AccountId'
                  - function:${self:provider.stage}-${self:service}-get-players
            TimeoutSeconds: 30
            Retry:
              - ErrorEquals:
                - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 2
                BackoffRate: 2
            Next: Add Stats Loop
          Add Stats Loop:
            Type: Map
            ItemsPath: "$.players"
            MaxConcurrency: 2
            Iterator:
              StartAt: Add Stats
              States:
                Add Stats:
                  Type: Task
                  Resource:
                    Fn::Join:
                      - ":"
                      - - arn:aws:lambda
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - function:${self:provider.stage}-${self:service}-add-stats
                  TimeoutSeconds: 30
                  Retry:
                    - ErrorEquals:
                      - States.ALL
                      IntervalSeconds: 1
                      MaxAttempts: 2
                      BackoffRate: 2
                  Next: Done Looping
                Done Looping:
                  Type: Pass
                  End: true
            Next: Create Output
          Create Output:
            Type: Task
            Resource:
              Fn::Join:
                - ":"
                - - arn:aws:lambda
                  - Ref: 'AWS::Region'
                  - Ref: 'AWS::AccountId'
                  - function:${self:provider.stage}-${self:service}-create-output
            TimeoutSeconds: 30
            End: true
